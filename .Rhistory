sorted_p<-sort(p_values,decreasing = F)
Q_tildes<-sapply(i,function(x) min(
1,(1/x)*(m0_tilde*sorted_p[x]+z_m_tilde*sqrt(m0_tilde*sorted_p[x]*(1-sorted_p[x])))
))
plot(sorted_p, Q_tildes,type='l')
max(sorted_p[Q_tildes<0.6])#gamma=0.6
# Compare with the simultaneous bound at Corollary 3.2
lambda_fixed<-0.2
alpha1<-0.04 #1-alpha1 quantie for z
alpha2<-0.01 #for m0
m0_bar<-m0_upb(alpha2,lambda_fixed,p_values)
#z_m0bar<-z_quantile(m0_bar,alpha1,B)
#Z_m0bar_MC<-z_generator(m0_bar, 10^5)
z_m0bar<-quantile(Z_m0bar_MC,1-alpha1)
Q_tildes2<-sapply(i,function(x) min(
1,(1/x)*(m0_bar*sorted_p[x]+z_m0bar*sqrt(
m0_bar*sorted_p[x]*(1-sorted_p[x])))
))
plot(sorted_p, Q_tildes,type='l',ylim=c(0,1))
lines(sorted_p,Q_tildes2,lty=2)
title('Comparing 95% UPBs for FDP')
legend('bottomright',c('Algorithm1 ',#(min lambda on simultaneous UCB of m0)
'Corollary 3.2'#(alpha1=0.04,alpha2=0.01)(lambda=0.2 when estimating UCB for m0)
),lty=c(1,2))
m0_bar;m0_tilde;
# Algorithm 2
# t in [0.01/m, 0.05], lambda in [0.8, 0.95]
Z_star_generator<-function(n,B){
z<-NULL
zz<-NULL
for(j in 1:B){
if (j%%(B%/%100)==0){
cat(j%/%(B%/%100),'...')
}
u<-runif(n,0,1)
u1<-u[0.00001<u & u<0.2 | 0.8<u & u<0.95]#restricted
z[j]<-max(sapply(u1,function(x) (sum(u<=x)-n*x)/sqrt(n*x*(1-x))))
zz[j]<-max(sapply(u,function(x) (sum(u<=x)-n*x)/sqrt(n*x*(1-x))))
}
#return(quantile(z,1-alpha))
#return(c(quantile(z,1-alpha),quantile(zz,1-alpha)))
return(list(z,zz))
}
lambdas<-800:950/1000
ts<-1:50/1000
Z_star_MC<-Z_star_generator(m,10^5)
#Z_star_MC<-Z_star_generator(m,10^5)
z_m_star<-quantile(Z_star_MC[[1]],1-alpha)
z_m2<-quantile(Z_star_MC[[2]],1-alpha)
z_m_star;z_m;z_m2;#95%quantile of Z*(1000) is smaller
# m_star_tilde<-function(zm,lambda,p_values){
#   r_lambda<-sum(p_values<lambda)
#   ((1/(2*(1-lambda)))*
#       (zm*sqrt(lambda*(1-lambda))+
#          sqrt(zm^2*
#                 lambda*(1-lambda)+
#                 4*(m-r_lambda)*(1-lambda))))^2
# }
m0_star_tildes<-sapply(sapply(c(ts,lambdas),function(l)
m_tilde(z_m_star,l,p_values)),function(x) min(x,m))
plot(ts,m0_star_tildes[1:length(ts)],type='l',ylim=c(700,1100),xlim=c(0,1),lwd=2,ylab='lambda')
lines(lambdas,m0_star_tildes[(length(ts)+1):length(m0_star_tildes)],lwd=2)
lines(1:999/1000,m0_tildes,col='orange')
legend('bottomright',c('Algorithm1','Algorithm2'),col=c('orange','black'),lty=c(1,1))
title("Comparing 95% UCB for m0")
min_m0_star_tilde<-min(m0_star_tildes,m)
#Z_star_m0_MC<-Z_star_generator(min_m0_star_tilde,10^5)
z_star_m0_tilde<-quantile(Z_star_m0_MC[[1]],1-alpha)
i<-1:m
sorted_p<-sort(p_values,decreasing = F)
Q_tildes3<-sapply(i,function(x) min(
1,(1/x)*(m0_tilde*sorted_p[x]+z_star_m0_tilde*sqrt(m0_tilde*sorted_p[x]*(1-sorted_p[x])))
))
plot(sorted_p, Q_tildes3,type='l',ylim=c(0,1),lty=3,col='red')
lines(sorted_p,Q_tildes,lty=1,col='black')
lines(sorted_p,Q_tildes2,lty=2,col='orange')
legend("bottomright",legend=c('Algorithm 1','Algorithm 2','fixed lambda=0.2'),
lty=c(1,3,2),col=c('black','red','orange'))
setwd("C:/Users/luodo/OneDrive/Document/Tutoring/MATH1005")
table(job,default)[,2]/summary(job)
str(data)
corr(age,balance)
cor(age,balance)
sd(age)
sd(balance)
cov(age,balance)
cov(age,balance)
sd(x)
sd(c(1,2))
psd(c(1,2))
var(c(1,2))
r<-r*sd(y)/sd(x)
b<-r*sd(y)/sd(x)
x<-age
r<-cor(x,y)
# between age and balance
# cor(age,balance)
# regression line!
y<-balance
x<-age
r<-cor(x,y)
b<-r*sd(y)/sd(x)
a<-mean(y)-b*mean(x)
a;b;
plot(age,balance)
lines(age,a+b*age)
lines(sort(age),a+b*sort(age))
plot(age,balance,ylim = c(0,10000))
lines(sort(age),a+b*sort(age))
plot(age,balance,ylim = c(0,10000))
lines(sort(age),a+b*sort(age),col='red',lwd=2)
xs<-min(age):max(age)
lines(xs,a+b*sort(xs),col='red',lwd=2)
lm(y~x)
b
a
sort(balance)
sort(balance)[1:5]
sort(balance,asceding=T)
sort(balance,decreasing = T)[1:5]
sort(balance,decreasing = T)[1:10]
# lm(y~x)
plot(lm(y~x))
sum(housig)
sum(housing)
summary(default)
summary(marital)
nrow(data)
library(multicon)
sqrt(0.5*(1-0.5))
popsd(c(1,1,1,1,0))
install.packages('multicon')
popsd(c(1,1,1,1,0))
library(multicon)
popsd(c(1,1,1,1,0))
se = sqrt(norw(data)*p*(1-p))
se = sqrt(nrow(data)*p*(1-p))
se = sqrt(nrow(data)*0.5*(1-0.5))
summary(marital)
summary(marital=='married')
sum(marital=='married')
(sum(marital=='married')-ev)/se
# Hypothesis Testing
ev = 0.5*nrow(data)
se = sqrt(nrow(data)*0.5*(1-0.5))
(sum(marital=='married')-ev)/se
se
se
pnorm(ts)
> ts
ts<-(sum(marital=='married')-ev)/se
pnorm(ts)
1-pnorm(ts)
sum(marital=='married')/nrow(data)
# Confidence Interval of proportion of married people
sample.p<-sum(marital=='married')/nrow(data)
se.proportion<-se/n
se.proportion<-se/nrow(data)
sqrt(0.5*(1-0.5)/nrow(data))
se.proportion
pnorm(0.97)
qnorm(0.97)
qnorm(0.975)
qnorm(0.975)
sample.p+qnorm(0.975)*se.proportion
sample.p-qnorm(0.975)*se.proportion
setwd("C:/Users/luodo/OneDrive/Document/Tutoring/MATH1005")
bank<-read.csv('bank.csv',sep = ';')
summary(bank)
dim(data)
summary(bank)
dim(bank)
nrow(bank)
ncol(bank)
bank[3,1]
colnames(bank)
bank[3,1:2]
bank[3,]
bank[,1]
mean(bank[,1])
mean(bank$age)
1:8
data<-bank[,1:8]
dim(data)
str(data)
hist(data$age)
summary(data$age)
quantile(data$age,0.2)
quantile(data$balance,0.99)
summary(data$balance)
hist(data$balance)
sort(data$balance, decreasing=T)[1:10]
sort(data$balance)[1:10]
sort(data$balance, decreasing=FALSE)[1:10]
?sort
levels(job)
table(job)
pie(table(job))
barplot(table(job))
hist(age)
# Marital
table(marital)
# Education
table(education)
# Default
table(default)
# Housing
table(housing)
# Loan
table(loan)
# Education
table(education,job)
# Education
table(education,marital)
quantile(balance,0.99)
mean(quantile(balance,0.99))
threshold<-quantile(balance,0.99)
balance>threshold
balance[balance>threshold]
mean(balance[balance>threshold])
length(balance[balance>threshold])
nrow(data)
balance[age>50]
mean(balance[age>50])
mean(balance[age<50 & age>40])
sum(balance[balance>threshold])
sum(balance[balance>threshold])/sum(balance)
sum(balance<0)
sum(balance<0)/length(balance)
sum(balance==0)/length(balance)
balance==0
sum(balance==0)
balance[marital=='divorced']==0
sum(balance[marital=='divorced']==0)/sum(balance[marital=='divorced'])
sum(balance[marital=='divorced']<0)/sum(balance[marital=='divorced'])
sum(balance[marital=='divorced']<0)
sum(marital=='divorced')
sum(balance[marital=='divorced']<0)/sum(marital=='divorced')
sum(marital=='divorced')
table(marital)
balance[job=='student']
mean(balance[job=='student'])
sapply(levels(job),function(x){mean(balance[job==x])})
mean(balance[job=='technican'])
mean(balance[job=='technician'])
default
table(default,marital)
table(default,marital)[2,]
table(default,marital)[2,1]
table(marital)
table(marital)[1]
table(default,marital)[2,1]/table(marital)[1]
table(default,marital)[2,2]/table(marital)[2]
table(default,marital)[2,]/table(marital)
table(default,marital)[2,]
table(marital)
barplot(table(job,default)[,2]/table(job,default)[,1])
barplot(table(marital,default)[,2]/table(marital,default)[,1])
barplot(table(marital,default)[,2]/table(marital))
table(job,default)
table(marital,default)
table(marital,default)[,1]
table(marital,default)[,2]
table(marital,default)
table(default,marital)
table(default,marital)[2,]
table(default,age>50)
plot(age,balance)
corr(age,balance)
cor(age,balance)
lm(balance~age)
lm(log(balance)~age)
# between age and balance
# cor(age,balance)
# regression line!
y<-balance
x<-age
r<-cor(x,y)
b<-r*sd(y)/sd(x)
a<-mean(y)-b*mean(x)
a;b;
plot(age,balance,ylim = c(0,10000))
xs<-min(age):max(age)
lines(xs,a+b*sort(xs),col='red',lwd=2)
# lm(y~x)
plot(lm(y~x))
sd(balance)
sd(age)
cor(balance,age)*sd(balance)/sd(age)
lm(balance~age)
b<-cor(balance,age)*sd(balance)/sd(age)
a<-mean(balance)-b*mean(age)
a
sum(marital=='married')
sum(marital=='married')/length(marital)
rbinom(100,1000,0.5)
hist(rbinom(100,1000,0.5))
hist(rbinom(1000,1000,0.5))
hist(rbinom(10000,1000,0.5))
sd<-sqrt(1000*0.5*0.5)
sd
hist((rbinom(10000,1000,0.5)-500)/sd)
(rbinom(10000,1000,0.5)-500)/sd>2
sum((rbinom(10000,1000,0.5)-500)/sd>2)
setwd("C:/Users/luodo/OneDrive/Courses/STAT3914/Project")
#Week 11
setwd("C:/Users/luodo/OneDrive/Courses/STAT3914/Project")
#library(ggplot2)
Data <- read.csv("cleanedData.csv")
dim(Data)
adultData<-Data[Data$AGEC>=18,]
summary(adultData$CHOPER1)
cut(adultData$CHOPER1,breaks=c(0,45,65,100),labels=c('low','medium','high'))
fat.cat<-cut(adultData$FATPER1,
breaks=c(0,20,35,100),
labels=c('low','medium','high'))
protein.fat<-cut(adultData$PROPER1,
breaks=c(0,15,25,100),
labels=c('low','medium','high'))
protein.cat<-cut(adultData$PROPER1,
breaks=c(0,15,25,100),
labels=c('low','medium','high'))
summary(protein.cat)
summary(adultData$PROPER1)
protein.cat<-cut(adultData$PROPER1,
breaks=c(-Inf,15,25,Inf),
labels=c('low','medium','high'))
summary(protein.cat)
min(protein.cat)
min(adultData$PROPER1)
protein.cat<-cut(adultData$PROPER1,
breaks=c(-1,15,25,101),
labels=c('low','medium','high'))
summary(protein.cat)
# low.fat_high.carb<-Data$FATPER1<25 & Data$CHOPER1>55
# high.protein_low.carb<-Data$PROPER1>20 & Data$CHOPER1<45
# high.fat_low.carb<-Data$FATPER1>30 & Data$CHOPER1<45
carb.cat<-cut(adultData$CHOPER1,
breaks=c(-1,45,65,100),
labels=c('low','medium','high'))
fat.cat<-cut(adultData$FATPER1,
breaks=c(-1,20,35,100),
labels=c('low','medium','high'))
protein.cat<-cut(adultData$PROPER1,
breaks=c(-1,15,25,100),
labels=c('low','medium','high'))
setwd("~/GitHub/STAT3014-Major-Project")
anova(glm(adultData$SEX~carb.car+fat.cat+protein.cat,family=binomial()))
anova(glm(adultData$SEX~carb.cat+fat.cat+protein.cat,family=binomial()))
anova(glm(ifelse(adultData$SEX==1,1,0)~carb.cat+fat.cat+protein.cat,family=binomial()))
anova(glm(ifelse(adultData$SEX==1,1,0)~carb.cat*fat.cat*protein.cat,family=binomial()))
anova(glm(ifelse(adultData$SEX==1,1,0)~carb.cat*fat.cat*protein.cat,family=binomial(),test='chisq'))
anova(glm(ifelse(adultData$SEX==1,1,0)~carb.cat*fat.cat*protein.cat,family=binomial()),test='chisq')
anova(glm(ifelse(adultData$SEX==1,1,0)~carb.cat*fat.cat*protein.cat,family=binomial()),test='Chisq')
adultData$PROPER1+adultData$FATPER1+adultData$CHOPER1
hist(adultData$PROPER1+adultData$FATPER1+adultData$CHOPER1)
adultData$BMR
# log-linear model
table(fat.cat,protein.cat,carb.fat)
carb.cat<-cut(adultData$CHOPER1,
breaks=c(-1,45,65,100),
labels=c('low','medium','high'))
fat.cat<-cut(adultData$FATPER1,
breaks=c(-1,20,35,100),
labels=c('low','medium','high'))
protein.cat<-cut(adultData$PROPER1,
breaks=c(-1,15,25,100),
labels=c('low','medium','high'))
setwd("~/GitHub/STAT3014-Major-Project")
# log-linear model
table(carb.cat,fat.cat,protein.cat)
# log-linear model
tables.3way<-table(carb.cat,fat.cat,protein.cat)
for(i in 1:3){
for(j in 1:3){
y<-c(y,tables.3way[i,j,])
}
}
y
type(y)
length(y)
tables.3way[i,j,]
y<-NULL
for(i in 1:3){
for(j in 1:3){
y<-c(y,tables.3way[i,j,])
}
}
y
tables.3way
tables.3way[1,1,]
tables.3way[,1,1]
tables.3way[1,,1]
tables.3way[1,1,1]
tables.3way[1,,1]
tables.3way[1,,3]
tables.3way[2,,1]
tables.3way[1,,1]
table.y<-NULL
for(i in 1:3){
for(j in 1:3){
y<-c(y,tables.3way[j,,i])
}
}
table.y
# log-linear model
tables.3way<-table(carb.cat,fat.cat,protein.cat)
table.y<-NULL
for(i in 1:3){
for(j in 1:3){
table.y<-c(table.y,tables.3way[j,,i])
}
}
table.y
tables.3way
rep(c('low','medium','high'),9)
table.fat<-factor(rep(c('low','medium','high'),9))
table.fat
?rep
rep(c('low','medium','high'),each=3,times=3)
table.carb<-factor(rep(c('low','medium','high'),each=3,times=3))
factor(rep(c('low','medium','high'),each=9))
table.fat<-factor(rep(c('low','medium','high'),9))
table.carb<-factor(rep(c('low','medium','high'),each=3,times=3))
table.protein<-factor(rep(c('low','medium','high'),each=9))
loglin.dat<-as.data.frame(y=table.y,
fat=table.fat,
carb=table.carb,
protein=table.protein)
as.dats.frame
?as.data.frame
loglin.dat<-as.data.frame(cbind(y=table.y,
fat=table.fat,
carb=table.carb,
protein=table.protein))
loglin.dat
cbind(y=table.y,
fat=table.fat,
carb=table.carb,
protein=table.protein)
cbind(table.y,
table.fat,
table.carb,
table.protein)
loglin.dat<-as.data.frame(cbind(
table.y,table.fat,table.carb,table.protein),
row.names = c('y','fat','carb','protein'))
loglin.dat
summary(table.fat )
table.fat
glm(y~fat+carb+protein)
glm(y~fat+carb+protein,data=loglin.dat)
glm(y~fat+carb+protein,data=loglin.dat,family = 'poisson')
data.frame
>data.frame
?data.frame
loglin.dat<-as.data.frame(y=table.y,
fat=table.fat,
carb=table.carb,
protein=table.protein)
loglin.dat<-data.frame(y=table.y,
fat=table.fat,
carb=table.carb,
protein=table.protein)
loglin.dat
glm(y~fat+carb+protein,family='poisson',data=loglin.dat)
glm(y~fat,family='poisson',data=loglin.dat)
anova(glm(y~fat,family='poisson',data=loglin.dat))
anova(glm(y~fat,family='poisson',data=loglin.dat),test = 'Chisq')
glm(y~fat,family='poisson',data=loglin.dat)$dev
glm(y~fat,family='poisson',data=loglin.dat)
d1<-glm(y~carb,family='poisson',data=loglin.dat)$dev
d.c<-glm(y~carb,family='poisson',data=loglin.dat)$dev
d.f<-glm(y~fat,family='poisson',data=loglin.dat)$dev
d.p<-glm(y~protein,family='poisson',data=loglin.dat)$dev
c(d.c,d.f,d.p)
d.additive<-glm(y~carb+fat+protein,family='poisson',data=loglin.dat)$dev
d.additive
d.cf<-glm(y~carb+fat+protein+carb:fat,
family='poisson',data=loglin.dat)$dev
d.cf
d.cp<-glm(y~carb+fat+protein+carb:protein,
family='poisson',data=loglin.dat)$dev
d.cp
d.fp<-glm(y~carb+fat+protein+fat:protein,
family='poisson',data=loglin.dat)$dev
c(d.cf,d.cp,d.fp)
anova(glm(y~carb+fat+protein+carb:fat,
family='poisson',data=loglin.dat))
glm.cf<-glm(y~carb+fat+protein+carb:fat,
family='poisson',data=loglin.dat)
glm.cp<-glm(y~carb+fat+protein+carb:protein,
family='poisson',data=loglin.dat)
glm.fp<-glm(y~carb+fat+protein+fat:protein,
family='poisson',data=loglin.dat)
c(glm.cf$dev,glm.cp$dev,glm.fp$dev)
d.additive
anova(glm.cf,test='Chisq')
anova(glm.pf,test='Chisq')
anova(glm.fp,test='Chisq')
bmi = dat1.var$bmi
library(rmarkdown)
install.packages('rmarkdown')
install.packages("rmarkdown")
library(rmarkdown)
getOption('repos')
install.packages("rmarkdown")
getOption('repos')
update.packages(repos="https://mran.revolutionanalytics.com/snapshot/2018-10-20")
N
getOption("repos")
getOption("repos")
